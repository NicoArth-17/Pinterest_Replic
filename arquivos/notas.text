# BIBLIOTECAS PARA CRIAR SITE:

    Teremos como opção para criação de sites os seguintes frameworks:
        - Flask
        - Django

    Estes sendo os mais usados, mas usaremos o Flask por ter um início de aprendizdo mais facíl.


# ESTRUTURAÇÃO DE PASTAS/ARQUIVOS PARA CRIAR SITE COM FLASK 

    Arquivos de código:

        - __init__.py: Arquivo para criar a aplicação/site;
        - forms.py: Arrquivo para formulários;
        - models.py: Arquivo para estrutura do Banco de Dados;
        - routes.py: Arquivo para criar rotas/links do site;
        - main.py: Arquvio para executar a aplicação/site;
        - templates: Pasta com arquivos HTML
        - instance: Pasta criada automáticamente com este nome para comportar SQL ao criá-lo
        - static: Pasta de arquivos estáticos. Imagens...


# HTML E PYTHON 

    Para construirmos uma estrutura de código python, colocamos a estrutura dentro de chaves e percentuais. Exemplo: {% for item in lista %}, e finalizamos com end + nome da da estrutura: {% endfor %}.

    Para referir uma variável python em html utilizamos chaves duplas: {{ variável }}.
    
    Para encaminharmos um link com destino em outra página HTML, usamos o método: 
    {{ url_for( 'nome_da_function_associada_a_página' ) }}.

        EX.: <a href="{{ url_for('homepage') }}">sair</a>
 

# IMPORTAÇÕES ARQUIVOS DE CÓDIGO EM REFERÊNCIA CIRCULAR

    Referência Circular é quando um arquivo precisa do outro pra funcionar. Sejam os arquivos, script1 e script2; numa Referência Circular, o script1 importaria o script2 e, o script2 importaria o script1. 

    Todos os arquivos de código que forem importados no arquivo "__init__.py" , deverão ser importados ao final do código. Pois a aplicação/site vai poder existir sem a importação de demais arquvios script.

        Ex: from flask import Flask

            app = Flask(__name__)

            from scripts import routes

        O arquvio "routes" foi importado ao final, ou seja, ele não foi necessário para criação do "app" e poderemos usá-lo com o app já criado anterior a sua importação.


# VERSÕES PYPI

    A última verão do Flask está apresentando erro para executar este projeto. Com isso será usada as seguintes versões PYPI:
    - flask==2.2.5 
    - werkzeug==2.3.0 -> O Werkzeug é uma biblioteca que o Flask usa internamente para fazer a interface de rede do servidor web


# CRIPTOGRÁFIA

    Ao criptografar a senha que o usuário irá cadastrar utlizando Bcrypt, está senha será armazenada no banco de dados de forma criptografada para garantir uma maior segurança ao usuário. 

# USO DE FRAMEWORKS PARA EDIÇÃO HTML E CSS


# OBSERVAÇÕES

    1. Foi instalado a PYPI 'email_validator' para validação de email, o WTForms usa internamente para fazer validação de e-mails.

    2. A função validate_on_submit() na verdade valida todo o formulário, não apenas o campo designado como SubmitField(). Ela é usada para verificar se o método de solicitação do formulário é "POST" e se todos os campos passaram por suas respectivas validações. Isso inclui verificar se os campos estão preenchidos adequadamente, se os valores estão no formato correto e se atendem a quaisquer outras regras de validação que você tenha definido.
